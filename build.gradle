repositories {
    mavenLocal()
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

group = "com.progwml6.ironchest"

dependencies {
    compileOnly 'net.blueberrymc:blueberry:21w10a'
    // compile against the JEI API but do not include it at runtime
    //compileOnly "mezz.jei:jei-1.16.2:${jei_version}:api"
    // at runtime, use the full JEI jar
    //runtimeOnly "mezz.jei:jei-1.16.2:${jei_version}"
}

task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = System.getenv().BUILD_NUMBER
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}

version = "${minecraft_version}-${mod_version}.${project.buildInfo.buildNum}"

sourceSets {
    main {
        resources {
            srcDirs "src/generated/resources"
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}

def modYmlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'mod.yml'
        expand 'version': project.version
    }
}


// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modYmlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modYmlSpec
                into path
            }
        }
    }
}

processResources {
    finalizedBy replaceResources
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Iron Chests",
                "Specification-Vendor"    : "Progwml6",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Progwml6",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
